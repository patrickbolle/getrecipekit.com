{%- style -%}
    .box-image {
      box-shadow: rgba(0, 0, 0, 0.09) 0px 3px 12px;
      border: 2px solid rgba(var(--color-border), 0.1);
    }

  .slideshow-container {
    position: relative;
    width: 100%;
    height: 100%;
    background: transparent;
  }

  .slideshow-image {
    position: absolute;
    inset: 0;
    opacity: 0;
    transition: opacity 1.5s ease-in-out;
    z-index: 1;
  }

  .slideshow-image.active {
    opacity: 1;
    z-index: 2;
  }

    {% assign total_images = 0 %}
    {% if block.settings.box_image != blank %}{% assign total_images = total_images | plus: 1 %}{% endif %}
    {% if block.settings.box_image_2 != blank %}{% assign total_images = total_images | plus: 1 %}{% endif %}
    {% if block.settings.box_image_3 != blank %}{% assign total_images = total_images | plus: 1 %}{% endif %}
    {% if block.settings.box_image_4 != blank %}{% assign total_images = total_images | plus: 1 %}{% endif %}

    {% if total_images > 1 %}
      {% for i in (1..4) %}
        {% assign image_key = 'box_image' %}
        {% if i > 1 %}
          {% assign image_key = image_key | append: '_' | append: i %}
        {% endif %}

        {% if i == 1 %}
          .slideshow-{{ section.id }}-{{ block.id }} .slideshow-image:nth-child({{ i }}) {
            animation: slideshow {{ total_images | times: 4 }}s linear infinite;
          }
        {% else %}
          {% assign delay = i | minus: 1 | times: 4 %}
          {% if block.settings[image_key] != blank %}
            .slideshow-{{ section.id }}-{{ block.id }} .slideshow-image:nth-child({{ i }}) {
              animation: slideshow {{ total_images | times: 4 }}s linear infinite;
              animation-delay: {{ delay }}s;
            }
          {% endif %}
        {% endif %}
      {% endfor %}
    {% endif %}

    .button-primary {
      background-color: rgb(var(--color-button));
      color: rgb(var(--color-button-text));
    }
    .button-primary:hover {
      background-color: rgba(var(--color-button), 0.8);
    }

    .button-secondary {
      background-color: transparent;
      color: rgb(var(--color-button));
      border: 1px solid rgb(var(--color-button));
    }
    .button-secondary:hover {
      background-color: rgba(var(--color-button), 0.04);
    }
{%- endstyle -%}

<div class='color-{{ color_scheme }} gradient twcss:rounded-2xl twcss:p-8 twcss:md:p-12 twcss:shadow-clean {% if section.settings.boxes_fill_height %}twcss:h-full{% endif %}'>
  <div class='twcss:flex twcss:flex-col twcss:h-full {% if block.settings.layout == "two_column" %}twcss:md:flex-row {% if block.settings.reverse_columns %}twcss:md:flex-row-reverse{% endif %} twcss:gap-8{% else %}twcss:gap-6{% endif %} twcss:items-start'>
    {% comment %} Only show the column if there is SOME content... ANY content {% endcomment %}
    {% if block.settings.icon != 'none'
      or block.settings.box_heading != blank
      or block.settings.box_text != blank
      or block.settings.show_checklist
      or block.settings.show_button
    %}
      <div class='{% if block.settings.layout == "two_column" %}twcss:md:flex-1{% endif %} twcss:flex twcss:flex-col'>
        {% if block.settings.icon != 'none' %}
          <div class='twcss:w-12 twcss:h-12 twcss:flex twcss:mb-6 twcss:items-center twcss:justify-center twcss:rounded-lg'>
            {% render 'icon' with icon: block.settings.icon, class: 'twcss:w-8 twcss:h-8 twcss:text-accent twcss:size-8' %}
          </div>
        {% endif %}

        {% if block.settings.box_heading != blank %}
          <h3 class='twcss:!text-3xl twcss:!font-semibold'>
            {{ block.settings.box_heading }}
          </h3>
        {% endif %}

        {% if block.settings.box_text != blank %}
          <p class='twcss:mt-6 twcss:!text-2xl'>
            {{ block.settings.box_text }}
          </p>
        {% endif %}

        {% if block.settings.show_checklist %}
          <ul class='twcss:mt-8 twcss:!text-2xl twcss:space-y-6'>
            {% if block.settings.check_1 != blank %}
              <li class='twcss:flex twcss:items-start twcss:gap-3'>
                {% render 'icon' with icon: 'checkmark', class: 'twcss:w-6 twcss:h-6 twcss:text-accent twcss:flex-shrink-0 twcss:mt-0.5' %}
                <span>{{ block.settings.check_1 }}</span>
              </li>
            {% endif %}
            {% if block.settings.check_2 != blank %}
              <li class='twcss:flex twcss:items-start twcss:gap-3'>
                {% render 'icon' with icon: 'checkmark', class: 'twcss:w-6 twcss:h-6 twcss:text-accent twcss:flex-shrink-0 twcss:mt-0.5' %}
                <span>{{ block.settings.check_2 }}</span>
              </li>
            {% endif %}
            {% if block.settings.check_3 != blank %}
              <li class='twcss:flex twcss:items-start twcss:gap-3'>
                {% render 'icon' with icon: 'checkmark', class: 'twcss:w-6 twcss:h-6 twcss:text-accent twcss:flex-shrink-0 twcss:mt-0.5' %}
                <span>{{ block.settings.check_3 }}</span>
              </li>
            {% endif %}
          </ul>
        {% endif %}

        {% if block.settings.show_button
          and block.settings.button_label != blank
          and block.settings.button_link != blank
        %}
          <div class='twcss:mt-auto twcss:pt-8'>
            <a
              href='{{ block.settings.button_link }}'
              class='twcss:inline-flex twcss:items-center twcss:px-8 twcss:py-4 twcss:text-xl twcss:font-medium twcss:transition-colors twcss:duration-200 button-{{ block.settings.button_style }}'
            >
              {{ block.settings.button_label }}
            </a>
          </div>
        {% endif %}
      </div>
    {% endif %}

    {% if block.settings.box_image != blank %}
      <div
        class='{% if block.settings.layout == "two_column" %}twcss:md:flex-1 twcss:!mt-0{% else %}twcss:w-full{% endif %} twcss:md:mt-0 {% unless block.settings.image_fill %}{% if block.settings.image_aspect == "square" %}twcss:aspect-square{% elsif block.settings.image_aspect == "landscape" %}twcss:aspect-[4/3]{% elsif block.settings.image_aspect == "wide" %}twcss:aspect-video{% elsif block.settings.image_aspect == "portrait" %}twcss:aspect-[3/4]{% elsif block.settings.image_aspect == "tall" %}twcss:aspect-[2/3]{% endif %}{% endunless %} {% if block.settings.image_fill %}twcss:h-full{% endif %}'
        {% if block.settings.image_fill and block.settings.image_min_height != blank %}
          style='min-height: {{ block.settings.image_min_height }}'
        {% endif %}
      >
        <div class='slideshow-{{ section.id }}-{{ block.id }} slideshow-container twcss:rounded-xl box-image twcss:h-full'>
          <img
            src='{{ block.settings.box_image | image_url: width: 800 }}'
            alt='{{ block.settings.box_image.alt | escape }}'
            class='slideshow-image twcss:w-full twcss:h-full twcss:rounded-xl twcss:object-cover twcss:object-center active'
            loading='lazy'
            width='{{ block.settings.box_image.width }}'
            height='{{ block.settings.box_image.height }}'
          >
          {% for i in (2..4) %}
            {% assign image_key = 'box_image_' | append: i %}
            {% assign image = block.settings[image_key] %}
            {% if image != blank %}
              <img
                src='{{ image | image_url: width: 800 }}'
                alt='{{ image.alt | escape }}'
                class='slideshow-image twcss:w-full twcss:h-full twcss:rounded-xl twcss:object-cover twcss:object-center'
                loading='lazy'
                width='{{ image.width }}'
                height='{{ image.height }}'
              >
            {% endif %}
          {% endfor %}
        </div>
      </div>
    {% endif %}
  </div>
</div>

{% if block.settings.box_image != blank %}
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // Select the unique slideshow container by using the generated class name
      const slideshow = document.querySelector('.slideshow-{{ section.id }}-{{ block.id }}');
      if (!slideshow) return; // exit if not found

      // Get all slideshow images
      const images = slideshow.querySelectorAll('.slideshow-image');

      // Only run the slideshow if there's more than one image
      if (images.length < 2) return;

      // Start with the first image already active as provided by Liquid markup
      let currentIndex = 0;

      function showNextImage() {
        // Remove active class from current image
        images[currentIndex].classList.remove('active');

        // Calculate next image index (wrap around at the end)
        currentIndex = (currentIndex + 1) % images.length;

        // Add active class to the next image to start its fade-in behind the current fade-out
        images[currentIndex].classList.add('active');
      }

      // Set interval using the block setting (convert seconds to milliseconds)
      setInterval(showNextImage, {{ block.settings.slideshow_interval | times: 1000 }});
    });
  </script>
{% endif %}
